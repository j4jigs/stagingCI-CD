name: Terraform CI/CD for Staging and Production

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - dev
    paths:
      - 'terraform/aws/staging/**'
      - 'terraform/aws/production/**'

jobs:
  terraform-staging:
    name: Terraform Plan & Apply - Staging
    runs-on: ubuntu-latest
    env:
      TF_WORKING_DIR: terraform/aws/staging
      AWS_REGION: ${{ secrets.AWS_REGION_STAGING }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if staging files changed
        id: check_staging
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q '^terraform/aws/staging/'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes in staging files. Skipping."
          fi

      - name: Configure AWS Credentials (Staging)
        if: steps.check_staging.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        if: steps.check_staging.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        if: steps.check_staging.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init

      - name: Terraform Plan
        if: steps.check_staging.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan

      - name: Terraform Validate
        if: steps.check_staging.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

      - name: Terraform Apply
        if: steps.check_staging.outputs.changed == 'true' && github.event.pull_request.merged == true
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve

  terraform-production:
    name: Terraform Plan & Apply - Production
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://console.aws.amazon.com/
    env:
      TF_WORKING_DIR: terraform/aws/production
      AWS_REGION: ${{ secrets.AWS_REGION_PROD }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check if production files changed
        id: check_production
        run: |
          git fetch origin ${{ github.event.pull_request.base.ref }}
          if git diff --name-only origin/${{ github.event.pull_request.base.ref }}...HEAD | grep -q '^terraform/aws/production/'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "No changes in production files. Skipping."
          fi

      - name: Configure AWS Credentials (Production)
        if: steps.check_production.outputs.changed == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        if: steps.check_production.outputs.changed == 'true'
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        if: steps.check_production.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} init

      - name: Terraform Plan
        if: steps.check_production.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan

      - name: Terraform Validate
        if: steps.check_production.outputs.changed == 'true'
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate

      - name: Terraform Apply
        if: steps.check_production.outputs.changed == 'true' && github.event.pull_request.merged == true
        run: terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve
